{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to sankaku documentation","text":"<p>It is an unofficial API wrapper for Sankaku Complex with type-hinting, pydantic data validation and an optional logging support with loguru.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Type-hints</li> <li>Deserialization of raw json data thanks to pydantic models</li> <li>Enumerations for API request parameters to provide better user experience <p>For instance, you can type <code>types.TagType.ARTIST</code> instead of <code>types[]=1</code></p> </li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.11+</li> <li>aiohttp</li> <li>pydantic</li> <li>loguru</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install sankaku\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>import asyncio\nfrom sankaku import SankakuClient\nasync def main():\nclient = SankakuClient()\npost = await client.get_post(25742064)\nprint(f\"Rating: {post.rating} | Created: {post.created_at}\")\n# \"Rating: Rating.QUESTIONABLE | Created: 2021-08-01 23:18:52+03:00\"\nawait client.login(access_token=\"token\")\n# Or you can authorize by credentials:\n# await client.login(login=\"nickname or email\", password=\"password\")\nasync for book in client.get_recently_read_books():\n...\nasyncio.run(main())\n</code></pre>"},{"location":"authorization/","title":"The authorization process","text":"<p>Authorization on Sankaku Complex can be performed in two ways: - via access token - via credentials (login and password)</p>"},{"location":"authorization/#note","title":"Note","text":"<p>It is not necessary to login into Sankaku Complex at all. You are free to send requests to server as unauthorized user, but in that case some methods will be unavailable to you (e.g. <code>get_favorited_posts()</code>, <code>get_favorited_books()</code> etc.).</p>"},{"location":"authorization/#authorization-via-access-token","title":"Authorization via access token","text":"<p>The following code block shows how to login into account using access token:</p> <pre><code>import asyncio\nimport os\nfrom sankaku import SankakuClient\nasync def main():\nclient = SankakuClient()\nawait client.login(access_token=os.getenv(\"ACCESS_TOKEN\"))\n# We're using virtual environment variables to prevent\n# private data from accidentally leaking.\n# ... Continue to work with API\nasyncio.run(main())\n</code></pre>"},{"location":"authorization/#authorization-via-credentials","title":"Authorization via credentials","text":"<p>Authorization method by credentials is the same as in previous example, but now user should pass two arguments to <code>login()</code> method:</p> <pre><code>import asyncio\nimport os\nfrom sankaku import SankakuClient\nasync def main():\nclient = SankakuClient()\nawait client.login(\nlogin=os.getenv(\"LOGIN\"), password=os.getenv(\"PASSWORD\")\n)\n# ... Continue to work with API\nasyncio.run(main())\n</code></pre>"},{"location":"authorization/#results","title":"Results","text":"<p>If authorization was successful, server will return response with serialized json data which will be processed by pydantic. After that user profile model will be passed to <code>client.profile</code> and all further requests to Sankaku servers will be performed on behalf of logged-in user.</p>"},{"location":"api/","title":"Table of contents","text":"<p>In future versions...</p>"},{"location":"clients/","title":"Introduction","text":"<p>There are several clients present and each of them is has different responsibilities, but for simplicity they all are merged into one client with multiple inheritance - <code>SankakuClient()</code>. If you want to use any specific client, then you should import it explicitly: <code>from sankaku.clients import &lt;client&gt;</code>.</p>"},{"location":"clients/ai-client/","title":"About AIClient","text":"<p>Recently Sankaku Complex developers released feature to generate posts by usage of neural networks. So AIClient is responsible for managing API requests to AI-related content.</p>"},{"location":"clients/ai-client/#note","title":"Note","text":"<p>Because AI is feature for premium users, AI client look a bit poor.</p>"},{"location":"clients/ai-client/#browsing-posts-with-aiclient","title":"Browsing posts with AIClient","text":"<p>For non-premium users there is restriction to directly view posts created by AI:</p> <p></p> <p>But this restriction can be circumvented by sending requests directly via API.</p> <p>Here is example of post browsing, using AIClient:</p> <pre><code>import asyncio\nfrom sankaku.clients import AIClient\nfrom sankaku import types\nasync def main():\nclient = AIClient()\nai_posts = []\nasync for post in client.browse_ai_posts():\nif post.rating is types.Rating.SAFE:  # Filter nsfw content\nai_posts.append(post)\nif len(ai_posts) &gt;= 10:  # For instance, we need to fetch 10 posts\nbreak\nprint(\"\\n\".join(post.file_url for post in ai_posts if post.file_url))\nasyncio.run(main())\n</code></pre>"},{"location":"clients/ai-client/#getting-specific-ai-post","title":"Getting specific AI post","text":"<p>If there is situation when you know ID of the post and want to fetch its data from server, you can do it like this:</p> <pre><code>import asyncio\nfrom sankaku.clients import AIClient\nasync def main():\npost_id: int = 23432  # Here the ID of the post you interested in\nclient = AIClient()\npost = await client.get_ai_post(post_id)\nprint(post.file_url)\nasyncio.run(main())\n</code></pre>"},{"location":"clients/book-client/","title":"About BookClient","text":"<p>BookClient resembles PostClient in terms of functionality. It's because posts and books are strongly related.</p>"},{"location":"clients/book-client/#browsing-books-with-bookclient","title":"Browsing books with BookClient","text":"<p>The following code shows how to browse pages with books:</p> <pre><code>import asyncio\nfrom sankaku.clients import BookClient\nfrom sankaku import types\nasync def main():\nclient = BookClient()\nasync for book in client.browse_books(\nfavorited_by=\"Nigredo\", order=types.BookOrder.POPULARITY\n):\nprint(book.name, book.description)\n# ... Continue fetching books or break\nasyncio.run(main())\n</code></pre>"},{"location":"clients/book-client/#getting-books-related-to-specific-post","title":"Getting books related to specific post","text":"<p>If specific post id has some books as its parents, you can use <code>get_related_books()</code> method to get such books:</p> <pre><code>import asyncio\nfrom sankaku.clients import BookClient\nasync def main():\nclient = BookClient()\npost_id: int = ...\nrelated_books = []\nasync for book in client.get_related_books(post_id):\nrelated_books.append(book)\nasyncio.run(main())\n</code></pre>"},{"location":"clients/book-client/#getting-specific-book-by-its-id","title":"Getting specific book by its ID","text":"<p>If you know specific book ID then you can get remaining parameters. Peculiarity of that method is that it returns the whole book information (including another posts that are part of book):</p> <pre><code>import asyncio\nfrom sankaku.clients import BookClient\nasync def main():\nclient = BookClient()\nbook_id: int = 14562\nbook = await client.get_book(book_id)\nprint(\"\\n\".join(post.file_url for post in book.posts))\nasyncio.run(main())\n</code></pre>"},{"location":"clients/book-client/#about-the-remaining-methods","title":"About the remaining methods","text":"<p>All the remaining methods inside their definitions invoke method <code>browse_books()</code> with certain arguments so there is no need to thoroughly consider them. Also, all the remaining mehtods require authentication.</p>"},{"location":"clients/http-client/","title":"About HttpClient","text":"<p>There is nothing special to say about HttpClient: its mere class with <code>aiohttp.ClientSession</code> instance inside, custom response type (with already awaited json response) and header forwarding to each request to server.</p> <p>If logging is enabled, each request and response will be displayed in terminal.</p>"},{"location":"clients/post-client/","title":"About PostClient","text":"<p>Client for post browsing has several times more methods than other clients. That applies to <code>browse_posts()</code> method too.</p>"},{"location":"clients/post-client/#browsing-posts-with-post-client","title":"Browsing posts with post client","text":"<p>Here simple code snippet with post browsing:</p> <pre><code>import asyncio\nfrom datetime import datetime\nfrom sankaku.clients import PostClient\nfrom sankaku import types\nasync def main():\nclient = PostClient()\nasync for post in client.browse_posts(\ntypes.PostOrder.QUALITY,\n[datetime(2020, 1, 12), datetime(2022, 1, 12)],\ntags=[\"animated\"],\nfile_type=types.FileType.VIDEO,\nrating=types.Rating.SAFE\n):\nprint(post.file_url)\n# ... Continue browsing posts or break\nasyncio.run(main())\n</code></pre>"},{"location":"clients/post-client/#getting-specific-post-by-its-id","title":"Getting specific post by its ID","text":"<p>You can get specific post by its ID like that:</p> <pre><code>import asyncio\nfrom sankaku.clients import PostClient\nasync def main():\npost_id: int = 25742064  # Here the ID of the post you interested in\nclient = PostClient()\npost = await client.get_post(post_id)\nprint(post.file_url)\nasyncio.run(main())\n</code></pre>"},{"location":"clients/post-client/#about-the-remaining-methods","title":"About the remaining methods","text":"<p>Almost all the remaining methods inside their definitions invoke method <code>browse_posts()</code> with certain arguments so there is no need to thoroughly consider them. But it's worth mentioning that methods <code>get_recommended_posts()</code> and <code>get_favorited_posts()</code> require authorization.</p>"},{"location":"clients/tag-client/","title":"About TagClient","text":"<p>Tag client has methods for browsing pages with tags and for fetching specific tag.</p>"},{"location":"clients/tag-client/#browsing-tags-with-tagclient","title":"Browsing tags with TagClient","text":"<p>Unlike AI-generated posts, whose browsing is restricted and can't be parametrized, method <code>browse_tags()</code> can be parametrized in same way as on website:</p> <pre><code>import asyncio\nfrom sankaku.clients import TagClient\nfrom sankaku import types\nasync def main():\nclient = TagClient()\nasync for tag in client.browse_tags(\norder=types.TagOrder.QUALITY,\nsort_parameter=types.SortParameter.POST_COUNT,\nsort_direction=types.SortDirection.DESC\n):\nprint(tag.name, tag.rating, tag.type)\n# ... Continue actions with tags or invoke break\nasyncio.run(main())\n</code></pre>"},{"location":"clients/tag-client/#getting-specific-tag","title":"Getting specific tag","text":"<p>Unlike posts, AI-generated posts or books, specific tag can be returned by its name or id:</p> <pre><code>import asyncio\nfrom sankaku.clients import TagClient\nasync def main():\nclient = TagClient()\ntag_id: int = 100\ntag_name: str = \"mirco_cabbia\"\ntag_by_id = await client.get_tag(tag_id)\ntag_by_name = await client.get_tag(tag_name)\nprint(tag_by_id)\nprint(tag_by_name)\nasyncio.run(main())\n</code></pre>"},{"location":"clients/user-client/","title":"About UserClient","text":"<p>Methods of UserClient enables you browse pages with users or get specific user.</p>"},{"location":"clients/user-client/#browsing-users-with-userclient","title":"Browsing users with UserClient","text":"<p>User browsing can be parametrized by specifying Order rule or level of users:</p> <pre><code>import asyncio\nfrom datetime import datetime\nfrom sankaku.clients import UserClient\nfrom sankaku import types\nasync def main():\nclient = UserClient()\nasync for user in client.browse_users(\ntypes.UserOrder.OLDEST,\ntypes.UserLevel.CONTRIBUTOR\n):\nprint(user.created_at &lt; datetime(2020, 12, 18).astimezone())\n# ... Continue comparing or break\nasyncio.run(main())\n</code></pre>"},{"location":"clients/user-client/#getting-specific-user","title":"Getting specific user","text":"<p>By analogy with <code>get_tag()</code> method you can get information about specific user by its nickname or id:</p> <pre><code>import asyncio\nfrom sankaku.clients import UserClient\nasync def main():\nclient = UserClient()\nuser_id: int = 3242\nuser_name: str = \"reichan\"\nuser_by_id = await client.get_user(user_id)\nuser_by_name = await client.get_user(user_name)\nprint(user_by_id)\nprint(user_by_name)\nasyncio.run(main())\n</code></pre>"}]}